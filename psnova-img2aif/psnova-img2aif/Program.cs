/* 
 * This tool does not attempt to recreate a real AIF. At all. 
 * It simply tries to use the header of one, patched where appropriate, to insert images.
 * A better tool would be required to do anything real fancy.
 */

using System;
using System.IO;
using System.Drawing;
using System.Drawing.Imaging;
using System.Runtime.InteropServices;

namespace psnova_img2aif
{
    class Program
    {
        static void Main(string[] args)
        {
            byte[] section1 = new byte[] { 0x20, 0x46, 0x49, 0x41, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x20, 0x46, 0x52, 0x61, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x20, 0x46, 0x49, 0x41, 0x01, 0x00, 0x01, 0x00, 0x41, 0x54, 0x49, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x60, 0x00, 0x08, 0x00, 0x68, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x67, 0x6D, 0x69, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0xAD, 0x02, 0x30, 0x30, 0x57, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x05, 0x00 };
            byte[] section2 = new byte[] { 0x01, 0x00, 0x08, 0x00, 0x10, 0x00, 0x00, 0x02, 0x00, 0x02, 0x01, 0x00, 0x00, 0x20, 0x00, 0x00 };
            byte[] section3 = new byte[] { 0xB8, 0x42, 0x05, 0x12, 0xEA, 0x07, 0x0B, 0x4A, 0xBF, 0xA0, 0xE4, 0xE7, 0xE2, 0x5E, 0x3D, 0xDF, 0x00, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x46, 0x4D, 0x41, 0xF0, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x61, 0x65, 0x68, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x7B, 0xB9, 0x5C, 0x2E, 0x6F, 0x88, 0x43, 0x8A, 0xA6, 0x74, 0x07, 0xF6, 0xEB, 0x7A, 0x95, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x75, 0x62, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00  };
            byte[] section4 = new byte[] { 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x64, 0x64, 0x61, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB8, 0x42, 0x05, 0x12, 0xEA, 0x07, 0x0B, 0x4A, 0xBF, 0xA0, 0xE4, 0xE7, 0xE2, 0x5E, 0x3D, 0xDF };
            byte[] section5 = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x07, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

            var bmp = Bitmap.FromFile(args[0]);
            var outputBmp = new Bitmap(bmp.Width, bmp.Height, PixelFormat.Format32bppArgb);
            using(Graphics g = Graphics.FromImage(outputBmp))
            {
                g.DrawImage(bmp, 0, 0);
            }

            using (BinaryWriter writer = new BinaryWriter(File.OpenWrite(args[1])))
            {
                writer.Write(section1);
                writer.Write((ushort)outputBmp.Width);
                writer.Write((ushort)outputBmp.Height);
                writer.Write(section2);

                var b = outputBmp.LockBits(new Rectangle(0, 0, outputBmp.Width, outputBmp.Height), ImageLockMode.ReadOnly, outputBmp.PixelFormat);
                int numbytes = b.Stride * outputBmp.Height;
                byte[] bmpData = new byte[numbytes];
                IntPtr ptr = b.Scan0;

                Marshal.Copy(ptr, bmpData, 0, numbytes);

                writer.Write(numbytes);
                writer.Write(section3);
                writer.Write(numbytes);
                writer.Write(section4);
                writer.Write(numbytes);
                writer.Write(section5);
                writer.Write(bmpData);
            }
        }
    }
}
